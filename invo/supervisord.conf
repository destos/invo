[supervisord]
logfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log
logfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB
logfile_backups=10           ; # of main logfile backups; 0 means none, default 10
loglevel=info                ; log level; default info; others: debug,warn,trace
pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
nodaemon=true               ; start in foreground if true; default false
silent=false                 ; no logs to stdout if true; default false
minfds=1024                  ; min. avail startup file descriptors; default 1024
minprocs=200                 ; min. avail process descriptors;default 200
;umask=022                   ; process file creation umask; default 022
# user=UNUX
;identifier=supervisor       ; supervisord identifier, default is 'supervisor'
;directory=/tmp              ; default is not to cd during start
;nocleanup=true              ; don't clean up tempfiles at start; default false
;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP
;environment=KEY="value"     ; key value pairs to add to environment
;strip_ansi=false            ; strip ansi escape codes in logs; def. false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; The supervisorctl section configures how supervisorctl will connect to
; supervisord.  configure it match the settings in either the unix_http_server
; or inet_http_server section.

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as in [*_http_server] if set
;password=123                ; should be same as in [*_http_server] if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

# [program:server]
command=daphne --fd 0 --access-log - --proxy-headers invo.asgi:application
autostart=true
autorestart=true
# stdout_logfile=/tmp/asgi.log
# redirect_stderr=true

# [fcgi-program:asgi]
# # TCP socket used by Nginx backend upstream
# socket=tcp://localhost:8000

# # Directory where your site's project files are located
# directory=/app

# # Each process needs to have a separate socket file, so we use process_num
# # Make sure to update "mysite.asgi" to match your project name
# command=daphne -u /run/daphne/daphne%(process_num)d.sock --fd 0 --root-path=/api --access-log - --proxy-headers invo.asgi:application

# # Number of processes to startup, roughly the number of CPUs you have
# numprocs=4

# # Give each process a unique name so they can be told apart
# process_name=asgi%(process_num)d

# # Automatically start and recover processes
# autostart=true
# autorestart=true

# # stdout and stderr directed to supervisor
# stdout_logfile=/dev/stdout
# stdout_logfile_maxbytes=0
# redirect_stderr=true

[program:web]
# Directory where your site's project files are located
directory=/app

command= daphne --root-path=/api -b 0.0.0.0 -p 8000 invo.asgi:application

# Automatically start and recover processes
autostart=true
autorestart=true

# stdout and stderr directed to supervisor
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:worker]
# Directory where your site's project files are located
directory=/app

command=python ./manage.py qcluster

# Number of processes to startup, roughly the number of CPUs you have
# numprocs=1

# Give each process a unique name so they can be told apart
# process_name=qcluster%(process_num)d

# stdout and stderr directed to supervisor
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

# Automatically start and recover processes
autostart=true
autorestart=true
