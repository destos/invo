input SpaceFilter {
    name: String
    name__icontains: String
}

interface SpaceInterface {
    id: ID!
    name: String!
    parent: Space
    children(filter: SpaceFilter): [Space]
    data: JSONData!
    itemCount: Int!
}

type SpaceNode implements SpaceInterface & TimeStamped {
    id: ID!
    created: DateTime!
    modified: DateTime!
    name: String!
    parent: Space
    children(filter: SpaceFilter): [Space]
    data: JSONData!
    itemCount: Int!
}

type GridSpaceNode implements SpaceInterface & TimeStamped {
    id: ID!
    created: DateTime!
    modified: DateTime!
    name: String!
    size: [Int]
    parent: Space
    children(filter: SpaceFilter): [Space]
    data: JSONData!
    itemCount: Int!
}

union Space = SpaceNode | GridSpaceNode

extend type Query {
    space(id: ID!): Space
    getSpaces(filter: SpaceFilter): [Space]
}