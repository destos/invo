input SpaceFilter {
  level: Int
  name: String
  name__icontains: String
}

input LayoutInput {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

type Layout {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

input DimensionsInput {
  x: Distance!
  y: Distance!
  z: Distance!
}

type Dimensions {
  x: Distance!
  y: Distance!
  z: Distance!
}

interface SpaceInterface {
  id: ID!
  name: String!
  parent: SpaceTypes
  parents: [SpaceTypes!]!
  children(filter: SpaceFilter): [SpaceTypes!]!
  items(first: Int, last: Int, after: String, before: String): Connection!
  data: JSONData
  itemCount: Int!
  layout: Layout!
  dimensions: Dimensions!
  volume: Volume!
}

type SpaceNode implements Node & SpaceInterface & TimeStamped & Protocol {
  id: ID!
  created: DateTime!
  modified: DateTime!
  irn: IRN!
  qr: String!
  name: String!
  parent: SpaceTypes
  parents: [SpaceTypes!]!
  children(filter: SpaceFilter): [SpaceTypes!]!
  items(first: Int, last: Int, after: String, before: String): Connection!
  data: JSONData
  itemCount: Int!
  layout: Layout!
  dimensions: Dimensions!
  volume: Volume!
}

type GridSpaceNode implements Node & SpaceInterface & TimeStamped & Protocol {
  id: ID!
  created: DateTime!
  modified: DateTime!
  irn: IRN!
  qr: String!
  name: String!
  parent: SpaceTypes
  parents: [SpaceTypes!]!
  children(filter: SpaceFilter): [SpaceTypes!]!
  items(first: Int, last: Int, after: String, before: String): Connection!
  data: JSONData
  itemCount: Int!
  layout: Layout!
  dimensions: Dimensions!
  volume: Volume!
}

union SpaceTypes = SpaceNode | GridSpaceNode

extend type Query {
  space(id: ID!): SpaceTypes
  getSpaces(filter: SpaceFilter): [SpaceTypes!]!
}

# TODO: make all these new mutations work.
input SpaceInput {
  name: String
  parent: ID
  layout: LayoutInput
  dimensions: DimensionsInput
}

type SpacePayload implements Payload{
  success: Boolean!
  errors: [FieldError!]!
  object: SpaceTypes
}

extend type Mutation {
  addSpace(input: SpaceInput!): SpacePayload!
  updateSpaceLayout(id: ID!, layout: LayoutInput!): SpaceTypes!
  updateSpace(id: ID!, input: SpaceInput!): SpacePayload!
  removeSpace(id: ID!): SpacePayload!
}
