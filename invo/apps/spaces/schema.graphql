input SpaceFilter {
    name: String
    name__icontains: String
}

interface SpaceInterface {
    id: ID!
    name: String!
    parent: SpaceTypes
    children(filter: SpaceFilter): [SpaceTypes!]!
    items(first: Int, last: Int, after: String, before: String): Connection!
    data: JSONData
    itemCount: Int!
}

type SpaceNode implements SpaceInterface & TimeStamped {
    id: ID!
    created: DateTime!
    modified: DateTime!
    name: String!
    parent: SpaceTypes
    children(filter: SpaceFilter): [SpaceTypes!]!
    items(first: Int, last: Int, after: String, before: String): Connection!
    data: JSONData
    itemCount: Int!
}

type GridSpaceNode implements SpaceInterface & TimeStamped {
    id: ID!
    created: DateTime!
    modified: DateTime!
    name: String!
    size: [Int]
    parent: SpaceTypes
    children(filter: SpaceFilter): [SpaceTypes!]!
    items(first: Int, last: Int, after: String, before: String): Connection!
    data: JSONData
    itemCount: Int!
}

union SpaceTypes = SpaceNode | GridSpaceNode

extend type Query {
    space(id: ID!): SpaceTypes
    getSpaces(filter: SpaceFilter): [SpaceTypes!]!
}