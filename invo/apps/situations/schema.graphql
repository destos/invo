enum SituationState {
    START 
    SELECTING 
    ADDING 
    PLACING 
    INCREMENT 
    CONSUMING 
}

enum SituationExit {
    OPEN
    ABANDONED
    COMPLETED
}

type Situation implements Node & TimeStamped {
    id: ID!
    created: DateTime!
    modified: DateTime!
    user: User!
    spaces: [SpaceTypes]!
    items: [ItemTypes]!
    state: SituationState!
    exitCondition: SituationExit!
}

extend type Query {
    activeSituation: Situation
    # TODO: other methods of selecting historical situations
}

input SelectEntitiesInput {
    irns: [IRN!]!
}

type SituationPayload {
    success: Boolean!
    object: Situation!
}

extend type Mutation {
    selectEntities(input: SelectEntitiesInput!): SituationPayload!
    unselectEntities(input: SelectEntitiesInput!): SituationPayload!
    abandonSituation: Situation
}
